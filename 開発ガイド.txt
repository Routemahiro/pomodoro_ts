# ポモドーロアプリ開発ガイド

## 1. プロジェクト概要

このアプリケーションは、ポモドーロテクニックをベースにした生産性向上ツールです。ユーザーフレンドリーなインターフェース、AI支援機能、詳細な生産性分析を特徴としています。

### 主要機能:
- ポモドーロタイマー
- タスク管理
- AI支援（ChatGPT連携）
- 生産性分析とレポート
- キャラクターによる視覚的フィードバック

## 2. 技術スタック

- 言語: Python 3.8+
- GUI フレームワーク: PySide6
- データベース: SQLite
- AI API: OpenAI GPT-4o-mini
- その他の主要ライブラリ:
  - pandas (データ分析)
  - matplotlib (グラフ生成)
  - requests (API通信)

## 3. アプリケーションアーキテクチャ

このアプリケーションは、モジュール化されたアーキテクチャを採用しています。

### 主要コンポーネント:
1. GUI (src/gui/): ユーザーインターフェースの実装
2. Core (src/core/): アプリケーションのコアロジック
3. Data (src/data/): データ管理と永続化
4. Utils (src/utils/): ユーティリティ関数と設定管理

### データフロー:
1. ユーザー入力 → GUI
2. GUI → Core (ビジネスロジック処理)
3. Core ↔ Data (データの保存と取得)
4. Core → GUI (結果の表示)

## 4. 開発ガイドライン

### コーディング規約:
- PEP 8 に準拠したコードスタイルを使用
- クラスやメソッドには適切なドキュメンテーション文字列を付ける
- 変数名や関数名は説明的で理解しやすいものを選ぶ

### バージョン管理:
- Git を使用したバージョン管理
- ブランチ戦略: GitHub Flow を採用
- コミットメッセージは具体的で理解しやすいものを心がける

### テスト:
- ユニットテストは `tests/` ディレクトリに配置
- 新機能の追加時は必ずテストを書く
- テストカバレッジは80%以上を目指す

### エラーハンドリング:
- 予期せぬエラーは適切にログに記録
- ユーザーに分かりやすいエラーメッセージを表示

## 5. ユーザーインターフェース設計

### メイン画面レイアウト:
1. 中央: キャラクター表示
2. 左上: タイマー表示
3. 右上: レポートボタン
4. 左下: ダッシュボード（折りたたみ可能）
5. 右下: 主要機能ボタン群（タイマー操作、タスク管理、AI会話、設定）

### 配色とテーマ:
- ベースカラー: #f0f0f0 (明るい灰色)
- アクセントカラー: #4a90e2 (青)
- テキストカラー: #333333 (濃い灰色)
- 警告色: #e74c3c (赤)

### アニメーションとトランジション:
- キャラクター状態変化: なめらかなクロスフェード (300ms)
- パネルのスライドイン/アウト: イーズイン/アウト (250ms)
- ボタンホバー効果: 色の変化とわずかな拡大 (100ms)

## 6. パフォーマンスとセキュリティ

### パフォーマンス最適化:
- 長時間動作を想定し、メモリリークに注意
- 大量のタスクデータを扱う場合の効率的なデータ構造使用
- GUI更新の最適化（不要な再描画を避ける）

### セキュリティ対策:
- ユーザーデータの暗号化保存
- API キーの安全な管理
- SQL インジェクション対策のためのパラメータ化クエリ使用

## 8. デプロイメントとリリース

- PyInstaller を使用してExe形式にパッケージング

## 9. 開発の進行方向について
- 美影さんとの開発を合同で進めますが、美影さんはAIのため長くなりすぎたチャットルームを更新することにより、記憶を失います。ルームを更新する前に開発ガイドとファイルに記載された要件を最新の内容に書き換えることで、スムーズなチャットルーム移行を実現します。
